[{"title":"写给工程师的十条精进原则","url":"/2018/09/18/写给工程师的十条精进原则/","content":"## 引言\n时间回到8年前，我人生中第一份实习的工作，是在某互联网公司的无线搜索部做一个C++工程师。当时的我可谓意气风发，想要大干一场，结果第一次上线就写了人生中第一个Casestudy。由于对部署环境的不了解，把SVN库里的配置文件错误地发到线上，并且上完线就去吃晚饭了，等吃饭回来发现师傅在焦头烂额地回滚配置。那次故障造成了一个核心服务20分钟不可用，影响了几百万的用户。这仅仅是一个开始，在后来半年的时间里，我几乎把所有职场新人可能犯的错误都犯了个遍。架构师让我调研一个抓取性能提升方案，我闷头搞了两周，也没有得出任何结论；本来安排好的开发计划，由于我临时要回去写论文，搞得经理措手不及；参加项目座谈会，全程“打酱油”......那段时间，自己也很苦恼，几乎每天晚上11点多才走，很累很辛苦，但依然拿不到想要的结果。\n\n8年过去了，自己从一个职场小白逐步成长为一名技术Leader。我发现团队中的很多同学在不停地重复犯着自己当年类似的错误。他们并不是不努力，到底是哪里出了问题？经过一段时间的观察与思考后，我想我找到了答案。那就是：我们大多数同学在工作中缺乏原则的指导。原则，犹如指引行动的“灯塔”，它连接着我们的价值观与行动。不久前，桥水基金创始人雷·达里奥在《原则》一书中所传达的理念，引爆了朋友圈。每个人都应该有自己的原则，当我们需要作出选择时，一定要坚持以原则为中心。但是在现实生活中，我们往往缺少对原则的总结，对于很多人来说这是一门“只可意会不可言传”的玄学，是属于老司机的秘密，其实不然。\n\n“追求卓越”是美团的价值观。作为一名技术人员，我们应该如何践行呢？本文总结了十条精进原则，希望能够给大家带来一些启发，更好地指导我们的行动。\n\n\n\n## 原则一：Owner意识\n“Owner意识”主要体现在两个层面：一是认真负责的态度，二是积极主动的精神。\n\n**认真负责是工作的底线**。首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD的工程交付质量，还会对协同工作的RD、QA、PM等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。\n\n**积极主动是“Owner意识”更高一级的要求**。RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。\n\n## 原则二：时间观念\n相信大家都有时间观念，但是真正能执行到位的可能并没有那么多。互联网是一个快速发展的行业，RD的研发效率是一个公司硬实力的重要体现。项目的按期交付是一项很重要的执行能力，在很大程度上决定着领导和同事对自己靠谱程度的评价。大家可能会问：难度几乎相同的项目，为什么有的同学经常Delay，而有的同学每次都能按时上线？一个很重要的原因，就是这些按时交付的同学往往具备如下两个特质：**做事有计划，工作分主次**。\n\n**工作安排要有计划性**。通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。\n\n**工作安排要分清楚主次**。我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。\n\n## 原则三：以终为始\n“以终为始”（Begin With The End In Mind），是史蒂芬·柯维在《高效能人士的七个习惯》中提到的一个习惯。它是以所有事物都经过两次创造的原则（第一次为心智上的创造，第二次为实际的创造）为基础的。直观的表达就是：**先想清楚目标，然后努力实现**。\n\n在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，**所以要根据问题设定目标，再进行优化**。\n\n“以终为始”，这一原则还可以作用于我们的学习中。很多同学看过很多技术文章，但是总是感觉自己仍然一无所知。很重要的一个原因，就是没有**带着目标去学习**。在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？是想把Redis的持久化原理搞清楚，还是把Redis的主从同步机制弄明白，亦或是想学习整个Redis Cluster的架构体系。如果我们能够带着问题与目标，再进行相关的资料搜集与学习，就会事半功倍。这种学习模式的效果会比碎片化阅读好很多。\n\n## 原则四：闭环思维\n你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。\n\n之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。**它强调的是一种即时反馈闭环**，如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的To Do进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入“沟通-发现问题-再沟通-再发现问题”的恶性循环中。**真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，To Do要有验收**。\n\n**“闭环思维”还要求能够定期主动进行阶段性的反馈**。刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。\n\n## 原则五：保持敬畏\n“君子之心，常怀敬畏”，保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。\n\n**当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致**。以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。\n\n保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，**让规范与约定与时俱进，也是另一种形式的敬畏**。\n\n\n\n## 原则六：事不过二\n“事不过二”，是我们团队一贯坚持的原则，它可以解读为两层含义。\n\n一层含义是“**所有的评审与问题讨论，不要超过两次**”。之所以有这样的要求，是因为我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：**所有的评审最多两次**。通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。\n\n“事不过二”原则的另一层含义，是“**同样的错误不能犯第二次**”。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。\n\n## 原则七：设计优先\n“设计优先”这条原则，相对来说更加具体一些。之所以单列一项，是因为架构设计太重要了。Uncle Bob曾说过：“软件架构的目标，是为了让构建与维护系统的所需人力资源最小化。”\n\n**架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题**。很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。**无数事实证明，忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构**。因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。\n\n**“设计优先”这一原则，要求写别人看得懂的设计*8。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。\n\n\n\n## 原则八：P/PC平衡\n“P/PC平衡”原则，即产出与产能平衡原则。伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。**产出与产能必须平衡，才能达到真正的高效能**。为了让大家更清晰的了解这一原则，本文举两个例子。\n\n从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。如果一味地做业务需求，经过一定的时间，系统会越来越慢，最终影响业务的稳定性；反之，一个没有任何业务产出的系统，最终会消亡。\n\n再从RD的角度来看这个问题，RD通过做需求来给公司创造价值，实现自己的产出。而RD的产能是指技术能力、软素质、身体健康状况，有这些资本后，我们才能进行持续的产出。在日常工作中，我发现很多RD往往只重视产出。他们也在很努力地做项目，但是每一个项目所使用的方法，还是沿用自己先前一贯的思路。最终，不仅项目做得一般，还会抱怨自己得不到任何成长。这就是P/PC不平衡的体现。**如果能在做项目的过程中，通过学习总结持续提升自己的技术能力和软素质，并将其应用于项目实施交付中，相信一定会取得双赢的结果**。\n\n“P/PC平衡”原则还适用于很多其他的领域，例如团队、家庭等，我本人也非常推崇这一原则。希望大家也能将其作为自身的一项基本原则，努力寻找到产出与产能的平衡点。\n\n## 原则九：善于提问\n“善于提问”，首先要勤于提问。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，**只有在争辩中，才可能诞生最好的主意和最好的决定**。\n\n在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。\n\n**“善于提问”，还要懂得如何提问**。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。\n\n批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。同样，在阅读一篇技术博客的时候，也要使用批判性的思维，多问几个为什么，作者得出的结论是否合理？论据是否充分？只有这样，才能不断地获取真正的知识。\n\n## 原则十：空杯心态\n“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。\n\n**保持“空杯心态”这一原则要求我们时刻进行自我检视与反省**。在工作中，多去跟不同级别的同学聊一聊，或者做一个360度评估，这有助于我们更加客观地评价自己。在横向对比中，多向那些优秀的同学看齐，学习他人的优点。很多同学在设计评审或者代码review过程中，针对别人提出的问题与建议，往往都采用一种对立的态度。错误地认为别人是在挑刺，是在针对自己。诚然，在某些方面，我们可能确实比其他人想得深入，但是这不代表在所有方面都能考虑周全。对于别人的建议，建议使用“善于提问”原则里提到的批判性思维仔细分析一下，虚心地吸取那些好的建议。\n\n工作学习就像“练级打怪”，技能储备的越多，就越容易走到最后。保持空杯心态，可以让我们发现很多以前注意不到的新能力，我们要做的就是努力学习它，将它们转化为自己能力库的一部分。\n\n## 总结\n以上，是我总结的工作与学习的十条基本原则。其中有的侧重于个人做事情的方法，如“Owner意识”、“时间观念”、“以终为始”、”闭环思维”；有的侧重于团队工作标准规范，如“保持敬畏”、“事不过二”、“设计优先”；有的侧重于团队或个人效能提升，如“P/PC平衡”、“善于提问”、“空杯心态”。这些原则是我多年在工作与学习中，不断总结得来的经验。希望在大家面临选择时，这些原则能够起到一定的帮助和指导作用。\n\n以原则为中心地工作与生活，让自己与团队变得更加强大。\n\n作者介绍\n云鹏，2014年加入美团，先后参与了美团酒店供应链体系、分布式调度系统的建设，现在负责美团旅行客户关系管理系统、基础信息服务的建设工作。\n\n> 文章转载自美团技术团队博客,原文链接：https://tech.meituan.com/10_principles_for_engineers.html\n","tags":["职场经验"]},{"title":"DDD入门","url":"/2018/08/20/DDD入门/","content":"\n## 什么是DDD\n\nDDD，即Domain-Driven Design，领域驱动设计，起源于2003年著名建模专家Eric Evans发表了他最具影响力的著名书籍“Domain-Driven Design –Tackling Complexity in the Heart of Software”。\n\n到底什么是DDD？到现在我也没法给出一个准确的定义，只能先简单介绍下自己的认知。DDD其实并非“标新立异”的新事物，而是对传统的以数据为中心的建模方式的思考。\n\n领域驱动设计不是一种具体的架构设计，而是一种程序设计建模思维和一种基于通用语言的有效沟通方式。\n\n\n## 我能DDD吗\n\n任何参与到目标系统/业务的人员都可以DDD，不论你的职位。\n\n> DDD首先不是关于技术的，而是关于讨论、聆听、理解、发现和业务价值的，而这些都是为了将知识集中起来。\n\n\n团队（或者项目）中参与DDD的所有成员，都是基于一套内部的通用语言来表达业务逻辑和系统设计。如果你不是技术人员，但是了解业务，那么可以为通用语言做出贡献，可以辅助验证领域模型；如果你是一位技术精湛的成员，但这并不代表你已经具备了相当的业务能力，但是你可以跟领域专家一起设计更好的通用语言和领域模型。\n\n那么团队中，谁才是领域专家呢？\n\n> 领域专家并不是一个职位，他可以是精通业务的任何人。他们可能了解更多的业务领域的背景知识，他们可能是软件产品的设计者，甚至可能是销售员。\n\n如果你是一位技术人员，最好能够将那些不怎么使用技术语言的人（领域专家）加进自己的团队，大家可以相互学习，发现自己的业务盲区，最终达到整个团队所有成员都在学习和成长。\n\n什么又是领域模型呢？\n\n> 领域模型是关于某个特定业务领域的软件模型。通常，领域模型通过对象模型来实现，这些对象同时包括了数据和行为，并且表达了准确的业务含义。\n\n不同角色的人都能从DDD中获益。\n- 新手开发者，可以避免在迷失在重复性的工作中；\n- 中级开发者可以提升对事物的洞察力，即对业务的理解和思考能力；\n- 高级开发者可以通过引入DDD来提高整个团队的“战斗力”；\n- 领域专家可以通过通用语言与技术人员无障碍地沟通，甚至在一起工作\n- 对于项目经理关注的排期和交付，也是十分有帮助\n\n\n## 为什么我们需要DDD\n\n```\nDRY—— Don't repeat yourself.\n```\n\n应用DDD带来的好处：\n\n- 使得领域专家和开发者在一起工作，这样开发出来的软件能够准确地表达业务规则——此时的软件就像如果领域专家是编码人员时所开发出来的一样\n- 可以帮助业务人员自我提高\n- 可以确保软件知识不只是掌握在少数人手中（对于成员流动性较大的互联网企业尤为重要）。\n- 代码即是设计，设计即是代码。\n- 领域专家、开发者和软件之间不存在需要“翻译”的地方\n\n听起来DDD近乎是完美的，但实际上还需要将设计落地到具体的业务上。\n\n### 难以捉摸的业务价值\n\n> 具有真正业务价值的软件能够很好地符合业务战略，并且可以将竞争优势融合到解决方案中。\n\n应用DDD，团队中的成员通过内部的通用语言来沟通，减少了团队中不同角色之间的沟通成本，同时可以大大减少沟通理解上的偏差，将更多的精力投入到领域模型的设计和实现。\n\n一方面降低了沟通和业务需求传递的成本，另一方面团队内部良好的沟通使得软件的工作方式符合真实的业务策略设计，从而提升软件的业务价值。\n\n### DDD如何帮助我们\n\n- 将领域专家和开发人员聚集在一起，这样所开发出来的软件能够反映出领域专家的思维模型，交付最具业务价值的软件\n- DDD关注业务战略\n- 战术设计建模工具，满足了软件真正的技术需求\n\n\n### 处理领域的复杂性\n\n基于DDD强大的威力和实施的难度，DDD首先应该应用在重要的业务场景下。对于那些重要的、复杂的，且能带来可观回报的软件，是最值得投入的，这样的软件模型命名为“核心域”，那些相对次要的称为“支撑子域”\n\n> 在使用DDD时，我们应该采用简单的方式对复杂领域进行建模，而不是使问题变得更加复杂。\n\n不同业务领域对于复杂性性的定义是不一样的，通常会通过判断业务（或者说系统）是不是重要的，然后决定开发的系统是否值得做出DDD投入。\n\n应用DDD设计的系统，其领域模型能表达明确的业务含义，而不是只是一堆代码围绕一堆数据运算，不懂业务背景的人难以看出其背后逻辑的含义。\n\n\n\n## 如何DDD\n\n通用语言和限界上下文同时构成了DDD的两大支柱。\n\n\n> 通用语言是团队共享的语言。\n\n通用语言是整个团队创建的一门语言。在最开始的时候，通用语言可能只包含领域专家使用的术语，但随着时间推移会不断壮大。\n\n如何掌握通用语言？\n\n- 同时绘制物理模型图和概念模型图，并标以名字和行为\n- 创建一些包含简单定义的术语表\n- 团队内部沟通讨论\n\n> 由于团队交流和代码才是对通用语言的持续表达，你应该尝试抛弃哪些模型图、术语表和文档。\n\n因为通用语言的改进直接反应在系统的源码中，而之前设计的文档和模型图通常不会同步被更新。\n\n然后通用语言也有其限制：\n- 通用语言尽在团队范围内使用，并且表达了一个单一的领域模型\n- 限界上下文和通用语言一一对应\n- 只有当团队工作在一个独立的限界上下文中是，通用语言才是“通用”的\n\n\n## 使用DDD的业务价值\n\n> 1. 你获得了一个非常有用的领域模型\n> 2. 你的业务得到更准确的定义和理解\n> 3. 领域专家可以为软件设计做出贡献\n> 4. 更好的用户体验\n> 5. 清晰的模型边界\n> 6. 更好的企业架构\n> 7. 敏捷、迭代和持续建模\n> 8. 使用战略和战术新工具\n\n\n\n## 实现DDD面临的挑战\n\n三点最常见的挑战：\n\n- 为创建通用语言腾出时间和经历\n- 持续地将领域专家引入项目\n- 改变开发对领域的思考方式\n\n我们需要花费大量的时间和精力来思考业务领域，研究概念和术语，并和领域专家交流，以发现、捕捉和改进通用语言。就个人而言，公司业务的变化，通常会引入新的通用语言，如何定义新的通用语言十分重要，因为后期改进的代价要大得多。\n\n引入领域专家也不是一件容易的事。特别是在一些小公司，或者创业公司，通常你的老大或者老板就是为数不多的领域专家，然后他们通常有很多会议或者外出，这样导致你可能很难找到一位经常可以一起讨论的领域专家。\n\n\n对于已经习惯了数据驱动开发的技术人员来说，要适应DDDD面向业务的思考问题方式就不是一件容易的事儿。更要命的事，几乎所有技术的入门教程都不会结合业务。\n\n\n## 参考\n- 《实现领域驱动设计》\n\n","tags":["读书笔记"]},{"title":"金字塔内部的结构","url":"/2018/08/14/金字塔内部的结构/","content":"\n有些显而易见的事实可能也需要经过很长时间才能被人们所认识。\n\n## 纵向关系\n\n> 一般的文档都是一维的：一个句子接着一个句子，呈现出纵向向下的结构。\n\n这种纵向延伸掩盖了一个事实，即思想是位于不同的抽象层次上的，大主题下的任何思想都同时与文中的其他思想发生着纵向及横向的关系。\n\n纵向联系能够很好的吸引读者的注意力。通过纵向联系，你可以引导一种疑问/问答式的对话，从而使读者带着极大兴趣了解你的思路进展。这种纵向联系会迫使读者按照你的思路产生符合逻辑的反应。\n\n向受众传递新信息的同时，必然会引发对方就其逻辑产生新的疑问，作为作者，你必须在该表述的下一个层次上横向地回答读者的疑问，甚至进行几轮递归。\n\n要想吸引读者的全部注意力，作者必须在做好回答问题的准备之前避免引起读者的疑问。\n\n\n## 横向关系\n当你考虑在下一个结构层次上如何表述时，必须保证你的表述可以回答上一个层次表述的疑问，同时还必须保证表述符合逻辑。\n\n> 表述必须具有明确的归纳或者演绎关系，但不可同时既具有归纳关系，又具有演绎关系。\n\n在组织思想时，归纳和演绎是仅有的两种可能的逻辑关系。\n\n\n\n## 序言的结构\n\n序言是引导读者进入作者设定的疑问/回答式对话的必要条件。\n\n问题的起源和发展必然以叙述的形式出现，因此也应当按照典型的叙述模式发展。序言的开头应当向读者说明“背景”的时间和地点。在这一背景中应当发生了某件事情，可称为“冲突”，使读者提出你的文章将要“回答”的“疑问”。\n\n> 背景、冲突、疑问、回答。\n\n\n\n","tags":["软素质"]},{"title":"为什么要使用金字塔结构","url":"/2018/08/12/为什么要使用金字塔结构/","content":"\n人类思维的基本规律\n\n```\n· 大脑自动将信息归纳到金字塔结构的各组中，以便于理解和记忆\n\n· 预先归纳到金子塔中的沟通内容，都更容易被人理解和记忆\n\n· 你应该有意识地将沟通内容组织成金字塔结构，包括口头表达和书面表达——说话、培训、演讲、报告、述职和文章、总结、申请方案、计划等\n\n```\n\n\n## 归类分组，将思想组织成金字塔\n\n### 奇妙的数字“7”\n\n人的短时记忆中，能够记住的对象，符合“7+/-2”原则，很多人能一次记住7个对象，有的人能一次记住9个对象，而有的智能记住5个。\n\n意味着，当大脑发现需要处理的项目超过4个或者5个时，就会开始将其归类到不同的逻辑范畴中，以便于记忆。\n\n### 归类分组搭建金字塔\n\n试想想你的妻子（前提得要先有一位妻子）让你去买烟的时候顺便带一些食品回来，口头给出了一个清单：\n\n```\n葡萄、橘子、牛奶、咸鸭蛋、土豆、苹果、鸡蛋、酸奶、胡萝卜\n```\n\n仅仅是想出去买包烟，结果多了一个清单，怎么才能记住呢？\n\n按金字塔原理来思考，可以根据清单内食品的属性进行归类：\n\n* 鸡蛋牛奶制品：牛奶、咸鸭蛋、鸡蛋、酸奶\n* 水果：葡萄、橘子、苹果\n* 蔬菜: 土豆、胡萝卜\n\n这样下来，记忆起来会轻松不少，因为虽然还是9个食品清单，但是分组后的记忆会轻松不少，因为不仅仅是分组，还有提高了一个抽象层次，即将有一定逻辑关系的食品抽象出一个新的概念。\n\n```\n由于处于较高层次的思想总是能够提示下一个层次的思想，而且这种关系比较自然，因而也更容易记住。\n```\n\n\n## 自上而下表达，结论先行\n\n先提出总结性思想，再提出被总结的具体思想。\n\n\n受众的大脑只能逐字理解作者的表达的思想。他们会假定一同出现的思想在逻辑上存在某种关系。如果你不预先告诉他们这种逻辑关系，而是一句一句地表达你的意思，读者就会自动从中寻找共同点，将你所表达的思想归类组合，以便了解各个组合的意义。\n\n\n## 自下而上思考，总结概括\n\n金字塔中的思想以3种方式互相关联——向上、向下、横向。位于一组思想的上一个层次是对这一组思想的概括，这一组思想则是对其上一层的解释和支持。\n\n* 纵向：文章中的任意一层的思想必须是下一层思想的概括\n* 横向：每组中的思想必须属于同一逻辑范畴\n* 横向：每组中的思想必须按逻辑顺序组织\n\n\n\n\n\n\n\n\n\n\n","tags":["软素质"]},{"title":"金字塔原理概述","url":"/2018/08/12/金字塔原理概述/","content":"## 基本原理\n\n一种重点突出、逻辑清晰、层次分明、简单易懂的思考方式、沟通方式、规范动作\n\n## 基本结构\n\n结论先行，以上统下，归类分组，逻辑递进。\n先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果会后过程，先论点后论据。\n\n\n## 训练表达者\n挖掘受众意图、关注点、利益点、兴趣点，想清楚说什么（内容），怎么说（思路，结构），掌握沟通的标准结构和规范动作\n\n\n## 解决的问题\n\n### 思考\n\n学会左、右脑全脑思考，提高结构化思考能力，做到全、准、快\n\n\n### 书面表达，公文写作\n\n会挖掘读者的关注点、兴趣点、需求点、利益点，能使用金字塔原理的4个原则，搭建逻辑清晰的常用公文写作框架，掌握写序言的四要素，归类分组的MECE原则，能够做到重点突出、逻辑清晰、简明扼要，让人看得懂、愿意看、记得住。快速写文章，缩短写作时间，减少修改次数。\n\n```\n紧急的写作（方案）任务往往没有足够的时间让你反复琢磨结构，修改内容，学习金字塔原理，掌握各种文档的写作结构（其实是对各种场景成功文案的总结）和问题拆分方法，可以达到快速成文，而且质量还不错的效果。\n```\n\n\n### 口头表达\n\n说话、演讲、讲课，能够使用金字塔原理的基本原则，回答受众最常用的四类问题：“是什么？为什么？如何做？好不好？”表达时重点突出、条理清晰，让人愿意听、听得懂、记得住，成为思路清晰，言简意赅的人。\n\n```\n良好的口头表达就是节约对话双方的时间，间接地在珍惜生命。\n```\n\n\n\n### 管理下属\n\n能够运用金字塔原理，考虑全面、周到、严谨，分配任务、设计流程不重不漏。\n\n```\n全面考虑问题（需求）、分析问题、设计解决方案、拆分工作，非常重要，直接影响到管理者的工作效率和下属的绩效。\n```\n\n\n### 培训师开发课程和讲课\n\n学会使用金字塔原理搭建框架结构、组织素材、重点突出、逻辑清晰、通俗易懂。\n\n```\n从一篇文档，一段对话，到一门课程，涉及的内容量通常会原来越大，组织的难度也越来越高，但是遵循的基本原理可以是一致的，即金字塔原理。每一门课程都有一个中心主题（即课程的核心主题），中心主题之下又有多个分主题（通常对应课程的不同阶段应该掌握的内容，按难易程度或者内容的承接性自然有序），不同阶段应该学习的内容也可以进行分级（可以分配必须掌握和选修）...以此方式进行深入的思考和划分设计出来的课程，自然是比较容易学习的。\n```\n\n\n\n\n","tags":["软素质"]},{"title":"Elasticsearch中的基本概念","url":"/2018/08/02/Elasticsearch中的基本概念/","content":"\n\n* 索引词(term)\n\n> 索引词（term）是一个能够被索引的精确值，区分大小写，可以通过term查询进行精确的搜索。\n\n* 文本(text)\n> 文本是一段普通的非结构化文字。通常，文本会被分析成一个个的索引词，存储在Elasticsearch的索引库中。为了让文本能够进行搜索，文本字段需要事先进行分析；当对文本中的关键字进行查询的时候，搜索引擎应该根据搜索条件搜索出原文本。\n\n* 分析(analysis)\n\n> 分析是将文本转换为索引词的过程，分析的结果依赖于分词器。\n\n* 集群(cluster)\n\n> 集群由一个或多个节点组成，对外提供服务，对外提供索引和搜索功能。\n\n* 节点(node)\n\n> 一个节点是一个逻辑独立的服务，它是集群的一部分，可以存储数据，并参与集群的索引和搜索功能。\n\n一个节点可以被配置为加入一个特点的集群。\n\n* 路由(routing)\n\n> 当存储一个文档的时候，它会存储在唯一的主分片中，具体哪个分片是通过散列值进行选择。\n\n* 分片(shard)\n\n>分片是lucene实例。索引是指向主分片和副本分片的逻辑空间。\n\n一个索引可以存储很大的数据，这些空间可以超过一个节点的物理存储的限制。为了解决这种存储限制，以及随之带来的单机搜索大数据的性能问题，Elasticsearch将索引分解成多个分片，每个分片都是一个全功能的、独立的单元，可以托管在集群中的任何节点。\n\n* 主分片(primary shard)\n\n> 每个文档可以存储在一个分片中，存储一个文档时，系统会首先存储在主分片中，然后复制到不同的分片。\n\n* 副本分片(replica sahrd)\n\n> 每一个分片有零个或者多个分片，副本分片是主分片的复制，主要有两个目的：\n>1. 增加高可用性\n>2. 提高性能。默认情况下，一个主分片会有一个副本分片，但是副本数量可以在后面动态地配置增加。\n\n* 索引(index)\n\n> 索引是具有相同结构的文档集合。\n\n* 类型(type)\n\n> 在索引中，可以定义一个或者多个类型。\n\n但是在后续的版本中，type可能会被限制为一种类型，甚至取消。\n\n* 文档(document)\n\n>  文档是存储在Elasticsearch中的一个json格式的字符串。它就像关系数据库中表的一行。\n\n* 映射(mapping)\n\n> 映射像关系数据库中的表结构。\n\n* 字段(field)\n\n> 文档中包含零个或者多个字段，文档可以是一个简单的值（例如字符串、整数、日期），也可以是一个数组或者嵌套对象。\n\n* 来源字段(source field)\n\n> 默认情况下，你的原文档将存储在_source字段中，当你查询的时也是返回这个字段。\n\n* 主键(ID)\n\n> ID是一个文件的为一个标识。\n\n\n","tags":["搜索技术"]},{"title":"CORS-跨域请求资源的协议","url":"/2018/06/09/CORS-跨域请求资源协议/","content":"\n当一个资源从与该资源本身所在的服务器不同的域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。\n\n出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非使用CORS协议请求资源。\n\n# 什么是CORS\n\nCORS（Cross-Origin Resource Sharing 跨源资源共享），当一个请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。\n\n[Web应用安全模型](https://en.wikipedia.org/wiki/Same-origin_policy)，浏览器默认的默认模型，即同源策略，运行在web浏览器下的脚本（如JavaScript），\n可以访问同一个域下的其他页面（资源）下的数据，但是禁止访问其他域下的资源数据。这种限制对于依赖cookie、session等信息的安全认证机制十分重要，减轻跨站信息泄露风险。\n但是随着Web应用的发展，不同域下的资源共享需求越来越大。为了突破同源策略，一种解决方案是[JSONP](https://www.cnblogs.com/JerryTian/p/4194900.html)，可以说是中针对dom加载机制的hack技术，有较大的风险，而CORS是W3C提出的一种解决跨域资源共享的标准化协议，目前主流浏览器都支持该协议。\n\nCORS新增了一组Http首部字段，允许声明哪些源站有权限访问资源，使得跨站数据传输更安全，减少http跨域的风险。\n\n\n# CORS的作用\n\n为了改善网络应用程序，开发人员要求浏览器供应商允许跨域请求。跨域请求主要用于：\n\n- 调用XMLHttpRequest或fetchAPI通过跨站点方式访问资源\n- 网络字体，例如Bootstrap（通过CSS使用@font-face 跨域调用字体）\n- 通过canvas标签，绘制图表和视频\n\n\n# 客户端的处理\n\n## 简单跨域\n当请求同时满足下面两个条件时，浏览器会直接发送GET请求，在同一个请求中做跨域权限的验证。\n\n请求方法是下列之一：\n\n- GET\n- HEAD\n- POST\n\n请求头中的Content-Type请求头的值是下列之一：\n\n- application/x-www-form-urlencoded\n- multipart/form-data\n- text/plain\n\n简单请求时，浏览器会直接发送跨域请求，并在请求头中携带Origin 的header，表明这是一个跨域的请求。服务器端接到请求后，\n会根据自己的跨域规则，通过Access-Control-Allow-Origin和Access-Control-Allow-Methods响应头，来返回验证结果。\n如果验证成功，则会直接返回访问的资源内容。\n\n\n## 预检请求\n与前述简单跨域请求不同，“需预检的请求”要求必须首先使用`OPTIONS`方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。\"预检请求“的使用，\n可以避免跨域请求对服务器的用户数据产生未预期的影响。\n\n\nOPTIONS请求头部中会包含以下头部：`Origin`、`Access-Control-Request-Method`、`Access-Control-Request-Headers`。\n服务器收到`OPTIONS`请求后，设置`Access-Control-Allow-Origin`、`Access-Control-Allow-Methods`、`Access-Control-Allow-Headers`头部与浏览器沟通来判断是否允许这个请求。\n如果Preflighted requests验证通过，浏览器才会发送真正的跨域请求。\n\n\n# CORS增加的首部字段\n\n## Request Header\n\n<pre>\norigin\n</pre>\n\n\nOrigin头在跨域请求或预先请求中，标明发起跨域请求的源域名。\n\n<pre>\nAccess-Control-Request-Method\n</pre>\n\n\n用于表明跨域请求使用的实际HTTP方法\n\n\n<pre>\nAccess-Control-Request-Headers\n</pre>\n\n\n用于在预先请求时，告知服务器要发起的跨域请求中会携带的请求头信息\n\n\n## Response Header\n\n<pre>\nAccess-Control-Allow-Origin\n</pre>\n\n\n\n 服务器端验证后的允许的跨域请求域名，可以是一个具体的域名或是一个*。\n\n<pre>\nAccess-Control-Expose-Headers\n</pre>\n\n\n用于允许返回给跨域请求的响应头列表，在列表中的响应头的内容，才可以被浏览器访问。\n\n<pre>\nAccess-Control-Max-Age\n</pre>\n\n\n用于告知浏览器可以将预先检查请求返回结果缓存的时间，在缓存有效期内，浏览器会使用缓存的预先检查结果判断是否发送跨域请求。\n\n\n<pre>\nAccess-Control-Allow-Credentials\n</pre>\n\n \n用于告知浏览器当withCredentials属性设置为true时，是否可以显示跨域请求返回的内容。简单请求时，浏览器会根据此响应头决定是否显示响应的内容。预先验证请求时，浏览器会根据此响应头决定在发送实际跨域请求时，是否携带认证信息。\n\n<pre>\nAccess-Control-Allow-Methods\n</pre>\n\n 用于告知浏览器可以在实际发送跨域请求时，可以支持的请求方法，可以是一个具体的方法列表或是一个*（表示任意方法）\n\n<pre>\nAccess-Control-Allow-Headers\n</pre>\n\n用于告知浏览器可以在实际发送跨域请求时，可以支持的请求头，可以是一个具体的请求头列表或是一个*（表示任意请求头）\n\n\n# 基于CORS的CSRF攻击\n\nCSRF攻击的大致原理：\n\n+ 用户通过浏览器，访问正常网站A（例如交易平台），通过用户的身份认证（比如用户名/密码）成功；\n+ 网站A产生token等Cookie信息并返回到用户浏览器； \n+ 用户保持A网站页面登录状态的情况下，在同一浏览器中，打开一个新的TAB页访问恶意网站B；\n+ 网站B接收到用户请求后，返回一些攻击性代码，请求A网站的资源（比如发起交易）；\n+ 浏览器执行恶意代码，在用户不知情的情况下携带Cookie信息，向网站A发出请求；\n- 网站A根据用户的Cookie信息核实用户身份（此时用户在A网站是已登录状态），A网站会处理该请求，导致来自网站B的恶意请求被执行；\n\n当然，一般涉及到钱的网站都会有安全审计检查，这种漏洞几乎是不存在的。\n\n\n\n\n# 参考资料\n+ [CORS](https://www.w3.org/TR/cors/)\n+ [enable-cors](https://enable-cors.org/)\n+ [用XMLHTTPRequest来进行ajax异步数据交交互](https://blog.csdn.net/z_l_ming/article/details/54969019)\n- [HTTP访问控制（CORS）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)","tags":["HTTP协议"]},{"title":"MySQL体系结构和存储引擎","url":"/2017/11/08/MySQL体系结构和存储引擎/","content":"## 数据库和实例\n这是两个比较容易混淆的概念：\n\n- 数据库：物理操作系统文件或其他形式文件类型的集合\n- 实例：MySQL数据库有后台线程及一个共享区组成\n\n在MySQL数据库中，这两者的关系通常是一一对应的，即一个数据库对应一个实例，但是在集群情况下，会存在多个实例对应一个数据库的情况。\n\nMySQL是一个被设计为单进程多线程的数据库。MySQL在启动的时候会按一定的顺序查找配置文件， 在存在多份配置文件的时候<!-- more -->，后加载的配置会覆盖先加载的配置；如果没有找到配置文件，则会按照编译时的默认参数设置启动实例。配置搜索顺序可以通过下面的方式查询：\n\n```\ngary@x1:~$ mysql --help | grep my.cnf\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf \n```\n\n## MySQL体系结构\n在学习MySQL体系结构之前，再次辨识下数据库和实例的概念。从概念上说，数据库是文件的概念，是依照某种数据模型组织起来的并存放于二级存储器中的数据集合；数据库实例是程序，是位于用户与操作系统之间的一层数据管理软件，用户对于数据库数据的任何操作，包括数据库定义、数据查询、数据库运行控制等都是在数据实例下进。\n\n![]()\n\n数据库主要由连接池组件、管理和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲组件、插件式存储引擎、物理文件。\n\n存储引擎是基于表，而非数据库。\n\n\n## MySQL存储引擎\nMySQL插件式的存储引擎体系结构是它区别于其他数据库的一个重要方面，下面介绍下集中常见的存储引擎。\n\n### InnoDB存储引擎\nInnoDB存储引擎支持事务，设计目标主要面向于`在线事务处理`（OLTP）应用，其主要特点是行锁设计、支持外键。InnoDB存储引擎将数据放在一个逻辑的表空间中，由InnoDB自行管理。从MySQL4.1起，它可以通过一个个独立的ibd文件隔离每个InnoDB存储引擎的表，也支持使用裸设备来建立其表空间。\n\nInnoDB通过`多版本并发控制`(MVCC)来获得高并发行，并且实现了SQL标准的4种`隔离级别`，默认为可重复读(REPEATABLE)。同时使用next-key locking的策略来避免`幻读`现象的产生。\n\nInnoDB存储引擎采用了`聚集`(clustered)的方式来存储表中的数据，每张表的存储都是按主键的顺序进行存放。如果没有显式定义主键，存储引会为每一行生成一个6字节的ROWID，并以此为主键。\n\n\n### MyISAM存储引擎\nMyISAM存储引擎不支持事务、表锁设计，但支持`全文索引`，主要面向一些`联机分析处理`（OLAP）数据库应用，它的缓冲池只缓存索引文件，而不缓冲数据文件。\n\n### Memory存储引擎\nMemoery存储引擎（之前称HEAP引擎）将表中的数据存在内存中，如果数据库重启或者发生崩溃，表中的数据都会丢失。它适用于存储临时数据的临时表，以及数据仓库中的维度表。Memory存储引擎默认适用哈希索引，而非B+树索引。\n\nMemory存储索引速度非常快，但只支持表锁，并发性能差，并且不支持TEXT和BLOB列类型；存储varchar类型时按照char的方式进行，浪费内存。\n\n其他存储引擎，比如Archive存储引擎可以提供高速的插入和压缩功能，Maria存储引擎用于取代原有的MyISAM存储引擎等。\n\nMyISAM、InnoDB(1.2)和Sphinx存储引擎都支持全文索引。\n\n\n## 小结\n本章主要从宏观上讲述了MySQL的体系结构，重点介绍了几种应用非常广泛的存储引擎，比如InnoDB、MyISAM、NDB、Memory等。另外还介绍了MySQL的启动和登录，不同平台(系统)在操作上略有不同，但是MySQL数据库确是保持一致的。\n理解数据库和数据库实例的定义与关系，对于学习和使用MySQL都是非常有益的。\n\n\n## 参考资料\n- 《MySQL技术内幕·InnoDB存储引擎》\n\n\n","tags":["存储引擎"]},{"title":"基于Hexo+github创建静态页面博客","url":"/2017/11/05/基于Hexo-github托管静态页面/","content":"## 背景\n之前的博客是动态脚本语言（PHP）搭建在虚拟主机上的Wordpress博客系统。由于已经很久没动PHP了，预期今后都不怎么会再使用PHP，索性就不再维护那套系统。很多内容或者是用MD编写，或者是直接写在公司的wiki上。总而言之，已经没有动力去PHP了。\n\n最近迷上了MD写作，正好Hexo是这样一套框架，能够将MD文档生成美观的响应式页面，因此根据官方文档，搭建了这样一套环境，并将页面托管在了Github，这样还省下了一笔主机费用。\n\n<!-- more -->\n\n### 什么是Hexo\n> [Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 工具\nGit\n\nNode\n\nHexo框架\n\n## 搭建Hexo构建页面环境\n下面描述的操作均在ubuntu系统下操作，其他环境可能略有不同，如果不能完全理解以下步骤的含义，请自行搜索适用自己平台的软件安装方法。\n1.安装git\n```\nsudo apt-get install -y git\n```\n2.安装Node\n下载 [NodeJs安装包](https://nodejs.org/en/download/) 安装\n或者\n```\nsudo apt-get install -y nodejs npm\n```\n3.下载hexo框架\n```\nnpm install hexo-cli -g\n\n```\n4.生成页面(比如博客)框架, 并启动服务验证\n```\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n更详细的使用说明请移步: [Hexo文档](https://hexo.io/zh-cn/docs/) ,\n[Hexo常用命令](https://hexo.io/zh-cn/docs/commands.html)\n\n## 免费托管到Github\n1.在 Github 上申请一个账户，注意一会系统分配的二级域名就是根据用户名确定的，比如说你的用户名是username，那么最终系统分配的二级域名就是 username.github.io。\n\n2.新建一个用户名开头的仓库（比如 username.github.io），并且将上文生成的页面上传到这个仓库。因为必须要上传了内容，才能使用 Github Pages 服务。\n\n3.进入仓库的设置(Settings)页面，找到  Github Pages 栏目，可以看到已经绑定了master分支，不能修改，但是可以修改展示的主题风格，还可以绑定个性化域名。\n\n4.现在已经可以使用域名进行访问了，如果你的用户名是username，那么可以通过_http://username.github.io_进行访问。当然也可以在仓库的设置页面，开启https访问。\n\n\n## 配置个性化域名\n如果你不满足系统分配的二级域名，其实系统早就给你准备好了，可参考以下步骤为自己托管的页面绑上一个高端、大气、上档次的域名。\n\n1.在仓库的设置页面找到“ Custom domain ”，填入自定义的个性化域名， 比如sense.ink。之后你会发现在仓库的根目录多了一个 CNAME文件，内容就是你刚填写的域名。\n\n2.现在绑定的域名还不能直接访问，需要修改域名的dns解析设置。这个需要在域名注册商提供的管理页面修改，不同的注册商提供的页面不一致，就不细说，主要还是新建一个A记录到二级域名对应的IP地址。如果有问题，可以参考[Github官方官方文档](https://help.github.com/articles/setting-up-an-apex-domain/)。\n\n3.绑定了自定义域名后，会导致默认提供的HTTPS服务不可用（访问时出现一把大红✘可不是友好的用户体验）。\n这个可以通过[ Cloudflare](https://www.cloudflare.com)解决，网上也有人说不可用，反正我试了下是可以的，可以点击[我的博客](https://sense.ink)看看效果。\n\n## 小结\n本次将博客部署到Github，过程简单，没有高深的技术，但确实到思维的模式的变革。从之前的重服务端，到现在的重客户端，结果几乎一致，但成本发生变化：之前使用简单，维护成本高；现在是维护成本低，使用陈本略高，但对于熟悉和热衷MD的码字者来说，可能效率更高。\n\n[总结本来写了一些其他的总结，无奈网易云笔记异常，瞬间没了，初步分析是客户端同步时的bug导致。记录下迁移的过程，方面后续的迁移和改动，也可以为需要的人提供一份实践过的参考文档]\n\n\n","tags":["Hexo"]}]